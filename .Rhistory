"Sub-Saharan Africa"
),
guide = guide_legend(order = 1)
)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color), alpha = 0.8)+
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
geom_vline(xintercept = 0, color = "#999999") +
geom_hline(yintercept = 0, color = "#999999") +
scale_x_continuous(breaks = c(-0.25, 0, 0.25, 0.5),
limits = c(-0.4, 0.55)) +
scale_y_continuous(breaks = c(-0.1,0,0.1),
limits = c(-0.16, 0.1)) +
scale_size_continuous(
breaks = c(2,4,6,8),
labels = c("50 million", "100 million", "150 million", "200 million"),
range = c(0, 8),
guide = guide_legend(order = 1)
) +
scale_color_manual(
values = cols,
breaks = c("red", "green", "darkblue", "yellow", "blue", "purple"),
labels = c(
"Central Europe, Eastern Europe and Central Asia",
"Latin America and Caribbean",
"North Africa and Middle East",
"South Asia",
"Southeast Asia, East Asia and Oceania",
"Sub-Saharan Africa"
),
guide = guide_legend(order = 2)
)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color), alpha = 0.8)+
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
geom_vline(xintercept = 0, color = "#999999") +
geom_hline(yintercept = 0, color = "#999999") +
scale_x_continuous(breaks = c(-0.25, 0, 0.25, 0.5),
limits = c(-0.4, 0.55)) +
scale_y_continuous(breaks = c(-0.1,0,0.1),
limits = c(-0.16, 0.1)) +
scale_size_continuous(
breaks = c(2,4,6,8),
labels = c("50 million", "100 million", "150 million", "200 million"),
range = c(0, 8),
guide = guide_legend(order = 1)
) +
scale_color_manual(
values = cols,
breaks = c("red", "green", "darkblue", "yellow", "blue", "purple"),
labels = c(
"Central Europe, Eastern Europe and Central Asia",
"Latin America and Caribbean",
"North Africa and Middle East",
"South Asia",
"Southeast Asia, East Asia and Oceania",
"Sub-Saharan Africa"
),
guide = guide_legend(order = 2)
) +
labs(x = "Change in MCV1 coverage (2019-2000)",
y = "Change in absolute geographical inequality (2019-2000)",
size = NULL,
color = NULL) +
theme_classic() +
theme(
legend.position = "top",
legend.direction = "vertical",
legend.text = element_text(size = 11),
legend.key.height = unit(0.5, "cm"),
axis.text = element_text(size = 11)
)
getwd()
?ggsave
library(ggplot2)
??ggsave
plot <- ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color), alpha = 0.8)+
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
geom_vline(xintercept = 0, color = "#999999") +
geom_hline(yintercept = 0, color = "#999999") +
scale_x_continuous(breaks = c(-0.25, 0, 0.25, 0.5),
limits = c(-0.4, 0.55)) +
scale_y_continuous(breaks = c(-0.1,0,0.1),
limits = c(-0.16, 0.1)) +
scale_size_continuous(
breaks = c(2,4,6,8),
labels = c("50 million", "100 million", "150 million", "200 million"),
range = c(0, 8),
guide = guide_legend(order = 1)
) +
scale_color_manual(
values = cols,
breaks = c("red", "green", "darkblue", "yellow", "blue", "purple"),
labels = c(
"Central Europe, Eastern Europe and Central Asia",
"Latin America and Caribbean",
"North Africa and Middle East",
"South Asia",
"Southeast Asia, East Asia and Oceania",
"Sub-Saharan Africa"
),
guide = guide_legend(order = 2)
) +
labs(x = "Change in MCV1 coverage (2019-2000)",
y = "Change in absolute geographical inequality (2019-2000)",
size = NULL,
color = NULL) +
theme_classic() +
theme(
legend.position = "top",
legend.direction = "vertical",
legend.text = element_text(size = 11),
legend.key.height = unit(0.5, "cm"),
axis.text = element_text(size = 11)
)
ggsave(path = "D:/R code/Github Clone/R-Together", plot = plot, filename = plot1.jpeg, dpi = 600)
ggsave(path = "D:/R code/Github Clone/R-Together", plot = plot, dpi = 600)
ggsave(path = "D:/R code/Github Clone/R-Together",plot, dpi = 600)
plot <- ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color), alpha = 0.8)+
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
geom_vline(xintercept = 0, color = "#999999") +
geom_hline(yintercept = 0, color = "#999999") +
scale_x_continuous(breaks = c(-0.25, 0, 0.25, 0.5),
limits = c(-0.4, 0.55)) +
scale_y_continuous(breaks = c(-0.1,0,0.1),
limits = c(-0.16, 0.1)) +
scale_size_continuous(
breaks = c(2,4,6,8),
labels = c("50 million", "100 million", "150 million", "200 million"),
range = c(0, 8),
guide = guide_legend(order = 1)
) +
scale_color_manual(
values = cols,
breaks = c("red", "green", "darkblue", "yellow", "blue", "purple"),
labels = c(
"Central Europe, Eastern Europe and Central Asia",
"Latin America and Caribbean",
"North Africa and Middle East",
"South Asia",
"Southeast Asia, East Asia and Oceania",
"Sub-Saharan Africa"
),
guide = guide_legend(order = 2)
) +
labs(x = "Change in MCV1 coverage (2019-2000)",
y = "Change in absolute geographical inequality (2019-2000)",
size = NULL,
color = NULL) +
theme_classic() +
theme(
legend.position = "top",
legend.direction = "vertical",
legend.text = element_text(size = 11),
legend.key.height = unit(0.5, "cm"),
axis.text = element_text(size = 11)
)
ggsave(path = "D:/R code/Github Clone/R-Together",plot = plot, filename = "ggplot1.jpeg", dpi = 600)
# ====== R Scipt for take home exercise solution ===
# Hi friend
# Nhiem vu 1: Nhap du lieu
covid_cases <- readRDS("day1/data/covid_cases.rds")
# Nhiem vu 2: Tính toán đơn giản
library(janitor)
library(tidyverse)
library(skimr)
library(readxl)
library(haven)
library(lubridate)
library(dplyr)
covid_cases <- tibble(covid_cases)
first_report_date <- min(covid_cases$date, na.rm = TRUE)
last_report_date <- max(covid_cases$date, na.rm = TRUE)
covid_cases <- covid_cases %>%
mutate(across(2:ncol(covid_cases), as.numeric))
covid_cases$case_global <- rowSums(covid_cases[,-1])
covid_cases[["percent_chn"]] <- (covid_cases$cases_chn/covid_cases$case_global)*100
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_cal <- (data[[cases_name]]/data$case_global)*100
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- percent_cal
return(data[[percent_name]])
}
compute_percent("vnm", covid_cases)
compute_percent("usa", covid_cases)
compute_percent("sgp", covid_cases)
##Nhiệm vụ 4:
covid_cases %>% print(c(date, percent_chn, percent_vnm, percent_usa, percent_sgp))
##Nhiệm vụ 4:
covid_cases %>% print(c("date", "percent_chn", "percent_vnm", "percent_usa", "percent_sgp"))
##Nhiệm vụ 4:
print(covid_cases[["date", "percent_chn", "percent_vnm", "percent_usa", "percent_sgp"]])
print(covid_cases[, c("date", "percent_chn", "percent_vnm", "percent_usa", "percent_sgp")])
compute_percent("vnm", covid_cases)
compute_percent("usa", covid_cases)
compute_percent("sgp", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data$case_global)*100
return(data[[percent_name]])
}
compute_percent("vnm", covid_cases)
compute_percent("usa", covid_cases)
compute_percent("sgp", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data$case_global)*100
return(data)
}
compute_percent("vnm", covid_cases)
compute_percent("usa", covid_cases)
compute_percent("sgp", covid_cases)
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(data)
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
print(head(data))
return(data)
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(head(data))
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(hdata[[percent_name]])
}
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(data[[percent_name]])
}
compute_percent("vnm", covid_cases)
covid_cases <- compute_percent("vnm", covid_cases)
# ====== R Scipt for take home exercise solution ===
# Hi friend
# Nhiem vu 1: Nhap du lieu
covid_cases <- readRDS("day1/data/covid_cases.rds")
covid_cases <- tibble(covid_cases)
first_report_date <- min(covid_cases$date, na.rm = TRUE)
last_report_date <- max(covid_cases$date, na.rm = TRUE)
covid_cases <- covid_cases %>%
mutate(across(2:ncol(covid_cases), as.numeric))
str(covid_cases)
covid_cases$case_global <- rowSums(covid_cases[,-1])
covid_cases[["percent_chn"]] <- (covid_cases$cases_chn/covid_cases$case_global)*100
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(cases_name)
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(print(data[[percent_name]]))
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(print(percent_name))
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
data$percent_name <-
return(print(percent_name)) <-  data[[percent_name]]
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
data$percent_name <-  data[[percent_name]]
return(print(percent_name))
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
data$percent_name <-  data[[percent_name]]
return(print(data$percent_name))
}
compute_percent("vnm", covid_cases)
compute_percent <- function(x, data){
cases_name <- paste("cases_", x, sep = "")
percent_name <- paste("percent_", x, sep = "")
data[[percent_name]] <- (data[[cases_name]]/data[["case_global"]])*100
return(data[[percent_name]])
}
compute_percent("vnm", covid_cases)
covid_cases[["percent_vnm"]] <- compute_percent("vnm", covid_cases)
covid_cases[["percent_usa"]] <- compute_percent("usa", covid_cases)
covid_cases[["percent_sgp"]] <- compute_percent("sgp", covid_cases)
print(covid_cases[, c("date", "percent_chn", "percent_vnm", "percent_usa", "percent_sgp")])
View(covid_cases)
##Nhiệm vụ 3.5:
covid_cases <- mutate_if(is.Date, ymd)
##Nhiệm vụ 3.5:
covid_cases <- covid_cases %>%  mutate_if(is.Date, ymd)
View(covid_cases)
ggplot() +
geom_col( # lớp biểu đồ cột
aes( # xác định các cột cho trục x, y
x = covid_cases$date, # điều này tương đương với covid_cases[["date"]]
y = covid_cases[[plot_col]]
),
fill = "cornflowerblue" # chọn màu cho biểu đồ cột
) +
geom_line( # lớp biểu đồ đường
aes( # xác định các cột cho trục x, y
x = covid_cases$date,
y = covid_cases[[plot_col]]
),
color = "red" # chọn màu cho biểu đồ đường
) +
labs(
y = "Cases",
x = "Date",
title = paste0("Reported Covid cases for ", country) # xác định tiêu đề cho biểu đồ
)
plot_col <- "cases_chn"
country <- "China"
ggplot() +
geom_col( # lớp biểu đồ cột
aes( # xác định các cột cho trục x, y
x = covid_cases$date, # điều này tương đương với covid_cases[["date"]]
y = covid_cases[[plot_col]]
),
fill = "cornflowerblue" # chọn màu cho biểu đồ cột
) +
geom_line( # lớp biểu đồ đường
aes( # xác định các cột cho trục x, y
x = covid_cases$date,
y = covid_cases[[plot_col]]
),
color = "red" # chọn màu cho biểu đồ đường
) +
labs(
y = "Cases",
x = "Date",
title = paste0("Reported Covid cases for ", country) # xác định tiêu đề cho biểu đồ
)
#nhap vao function phai co dau ""
plot_function <- function(col, country){
plot_col <- col
country_plot <- country
ggplot() +
geom_col( # lớp biểu đồ cột
aes( # xác định các cột cho trục x, y
x = covid_cases$date, # điều này tương đương với covid_cases[["date"]]
y = covid_cases[[plot_col]]
),
fill = "cornflowerblue" # chọn màu cho biểu đồ cột
) +
geom_line( # lớp biểu đồ đường
aes( # xác định các cột cho trục x, y
x = covid_cases$date,
y = covid_cases[[plot_col]]
),
color = "red" # chọn màu cho biểu đồ đường
) +
labs(
y = "Cases",
x = "Date",
title = paste0("Reported Covid cases for ", country_plot) # xác định tiêu đề cho biểu đồ
)
}
plot_function("cases_chn","China")
plot_function("cases_vnm","Vietnam")
skimr::skim(covid_cases[,c("cases_chn","cases_vnm","cases_sgp","cases_sgp")])
skimr::skim(covid_cases)
skimr::skim(covid_cases[,c("cases_chn","cases_vnm","cases_sgp","cases_usa")])
skimr::skim(covid_cases[,c("cases_chn","cases_vnm","cases_sgp","cases_usa")])
library(tidyverse)
library(gtsummary)
#Import dữ liệu
covid_cases <- readRDS("day2/data/covid_cases.rds")
#load các package cần thiết
library(tidyverse)
library(ggplot2)
view(covid_cases)
covid_cases <- tibble(covid_cases)
print(covid_cases)
library(skimr)
skim(covid_cases)
View(covid_cases)
covid_cases <- pivot_longer(names_to = "date", values_to = "cases")
View(covid_cases)
#Dùng skim để chuyển đổi dữ liệu
skim(covid_cases)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
)
View(covid_cases)
incorrected_data <- covid_cases[,"cases" < 0]
View(incorrected_data)
View(incorrected_data)
library(dplyr)
incorrected_data <- covid_cases %>% filter(cases < 0)
View(incorrected_data)
View(covid_cases)
corrected_data <- covid_cases %>% filter(cases > 0)
View(corrected_data)
corrected_data <- covid_cases %>% filter(cases >= 0)
View(corrected_data)
#load các package cần thiết
library(tidyverse)
library(ggplot2)
library(skimr)
library(dplyr)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
) %>% lubridate()
library(lubridate)
#Nhiệm vụ 1: Import dữ liệu
covid_cases <- readRDS("day2/data/covid_cases.rds")
#Chuyển dữ liệu thành tibble
covid_cases <- tibble(covid_cases)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
) %>%
mutate(
date = ymd(date),
week_num = week(date),
year = year(date)
)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
)
#Chuyển dữ liệu thành tibble
covid_cases <- tibble(covid_cases)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
#Nhiệm vụ 1: Import dữ liệu
covid_cases <- readRDS("day2/data/covid_cases.rds")
#Chuyển dữ liệu thành tibble
covid_cases <- tibble(covid_cases)
#Dùng skim để chuyển đổi dữ liệu
skim(covid_cases)
covid_cases <- covid_cases %>% pivot_longer(
cols = starts_with("cases_"),
names_to = "country",
names_prefix = "cases_",
values_to = "cases"
)
corrected_data <- corrected_data %>% mutate(
date = ymd(date),
week_num = week(date),
year = year(date)
)
View(corrected_data)
View(corrected_data)
covid_cases <- corrected_data %>% filter(week_num >= 3 & week_num <= 12 & year == 2020)
View(covid_cases)
