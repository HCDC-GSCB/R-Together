mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(report_date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(report_date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(cases) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
#tao cot moi dai dien cho so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases_gnb, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global)
# ====== R Scipt for take home exercise solution ===
#nhap file
covid_cases <- readRDS("~/GitHub/day1/data/covid_cases.rds")
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
#tao cot moi dai dien cho so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
covid_cases <- dplyr::mutate(case.names(gobal))
covid_cases <- dplyr::mutate(case_gobal)
covid_cases <- dplyr::mutate(cases_gobal)
covid_cases <- covid_cases %>%
dplyr::mutate(cases_gobal)
#tao cot moi dai dien cho so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
# Tạo bảng tổng số ca mỗi ngày
global_cases <- covid_cases %>%
group_by(date) %>%
summarise(case_global = sum(cases, na.rm = TRUE))
)
covid_cases <- covid_cases %>%
mutate(cases_gobal)
covid_cases$new_colum <- cases_gobal
covid_cases$new_colum
covid_cases <- covid_cases %>%
mutate(new_column = 123)
#tao cot moi dai dien cho so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
covid_cases <- covid_cases %>%
mutate(new_column = 123)
View(covid_cases)
head(covid_cases)
View(covid_cases)
#tao cot moi dai dien cho so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = rowsum(date, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = rowsum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = rowsum( na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
mutate(case_global = rowsum(cases, na.rm = TRUE)) %>%
ungroup()
covid_cases <- covid_cases %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
#tao cot moi dai dien cho so truong hop tren moi quoc gia moi ngay bao cao
# Đọc dữ liệu từ file .rds
covid_cases <- readRDS("covid_cases.rds")
# Thêm cột case_global - tổng số ca toàn cầu theo ngày
library(dplyr)
covid_cases <- covid_cases %>%
group_by(date) %>%
mutate(case_global = sum(cases, na.rm = TRUE)) %>%
ungroup()
head(covid_cases)
View(covid_cases)
covid_cases <- readRDS("~/GitHub/day1/data/covid_cases.rds")
head(covid_cases)
View(covid_cases)
#doi kieu du lieu
str(df)
#Ngay bao cao du lieu
str(covid_cases)
first_report_case <- min(covid_cases$date, na.rm = T)
first_report_case <- min(covid_cases$date, na.rm = T)
##Som nhat
first_report_case <- min(covid_cases$date, na.rm = T)
head(first_report_case)
##Som nhat
first_report_date <- min(covid_cases$date, na.rm = T)
head(first_report_date)
covid_cases <- readRDS("~/GitHub/day1/data/covid_cases.rds")
head(covid_cases)
#Ngay bao cao du lieu
##Som nhat
first_report_date <- min(covid_cases$date, na.rm = T)
head(first_report_date)
##Muon nhat
Last_report_date <- max(covid_cases$date, na.rm = T)
head(Last_report_date)
#Tao cot moi dai dien tong so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
head(covid_cases)
covid_cases <- covid_cases %>%
mutate(case_global = rowSums(select(., starts_with("cases_")), na.rm = TRUE))
head(covid_cases)
#Tao cot moi dai dien cho ty le phan tram TrungQuoc
covid_cases <- covid_cases %>%
mutate(percent_chn = 100*cases_chn/case_global)
head(percent_chn)
return(percent)
##Tao mot Function
computer_percent <- function(data, country_code) {
# Tạo tên cột tương ứng với quốc gia
country_col <- paste0("cases_", country_code)
# Kiểm tra cột có tồn tại không
if (!(country_col %in% names(data))) {
stop(paste("Cột", country_col, "không tồn tại trong dữ liệu."))
}
# Tính phần trăm ca bệnh của quốc gia đó so với toàn cầu
percent <- 100 * data[[country_col]] / data$case_global
return(percent)
}
return(percent)
covid_cases$percent_chn <- compute_percent(covid_cases, "chn")
##Tao mot Function
computer_percent <- function(data, country_code) {
# Tạo tên cột tương ứng với quốc gia
country_col <- paste0("cases_", country_code)
# Tính phần trăm ca bệnh của quốc gia đó so với toàn cầu
percent <- 100 * data[[country_col]] / data$case_global
return(percent)
}
return(percent)
##Tao mot Function
computer_percent <- function(data, country_code) {
# Tạo tên cột tương ứng với quốc gia
country_col <- paste0("cases_", country_code)
# Tính phần trăm ca bệnh của quốc gia đó so với toàn cầu
percent <- 100 * data[[country_col]] / data$case_global
return(percent)
}
# Tạo tên cột tương ứng với quốc gia
country_col <- paste0("cases_", country_code)
View(computer_percent)
##Tao mot Function
compute_percent <- function(data, country_code) {
# Tạo tên cột quốc gia
country_col <- paste0("cases_", country_code)
# Kiểm tra cột có tồn tại không
if (!(country_col %in% names(data))) {
stop(paste("Cột", country_col, "không tồn tại trong dữ liệu."))
}
if (!("case_global" %in% names(data))) {
stop("Cột case_global chưa có trong dữ liệu.")
}
# Tính phần trăm
percent <- 100 * data[[country_col]] / data$case_global
return(percent)
}
compute_percent(covid_cases, "chn")
compute_percent(covid_cases, "sgp")
compute_percent(covid_cases, "vnm")
compute_percent(covid_cases, "aus")
#su dung function tao 3 cot moi
covid_cases <- covid_cases %>%
mutate(
percent_chn = compute_percent(., "CHN"),
percent_vnm = compute_percent(., "VNM"),
percent_usa = compute_percent(., "USA"),
percent_sgp = compute_percent(., "SGP")
)
#su dung function tao 3 cot moi
library(dplyr)
covid_cases <- covid_cases %>%
mutate(
percent_chn = compute_percent(., "CHN"),
percent_vnm = compute_percent(., "VNM"),
percent_usa = compute_percent(., "USA"),
percent_sgp = compute_percent(., "SGP")
)
covid_cases <- covid_cases %>%
mutate(
percent_chn = compute_percent(., "chn"),
percent_vnm = compute_percent(., "vnm"),
percent_usa = compute_percent(., "usa"),
percent_sgp = compute_percent(., "sgp")
)
#in bang chi chon cac cot
covid_cases %>%
select(date, percent_chn, percent_vnm, percent_usa, percent_sgp) %>%
print()
country <- c("Angola", "Papua New Guinea", "Pakistan", "Chad", "Ethiopia", "Kenya", "Nigeria", "Liberia", "Burkina Faso", "India")
coverage <- c(-0.14, -0.35, 0.12, 0.14, 0.32, 0.07, 0.2, 0.18, 0.3, 0.35)
inequality <- c(0.1, 0.08, 0.05, 0.01, 0.005, -0.06, -0.07, -0.11, -0.13, -0.16)
df_plot <- data.frame(country, coverage, inequality)
df_plot
library(tidyr)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(color = "blue") +
scale_x_continuous("Weight (1000 lbs)") +
scale_y_continuous("Miles Per Gallon") +
ggtitle("MPG vs. Weight") +
theme_bw()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(color = "blue", shape= 2) +
scale_x_continuous("Weight (1000 lbs)") +
scale_y_continuous("Miles Per Gallon") +
ggtitle("MPG vs. Weight") +
theme_bw()
ggplot(df_plot, aes(x = coverage, y = inequality))
geom_point()
geom_point()
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point()
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point() +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(colors = "red", shape = 5) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(fill = "red", shape = 5) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(fill = "red", shape = 5) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(fill = "red", shape = 10) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(fill = "red", shape = 1) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(fill = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red")
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
)
ggplot(df_plot, aes(x = coverage, y = inequality))
ggplot(df_plot, aes(x = coverage, y = inequality)) + geom_point()
ggplot(df_plot, aes(x = coverage, y = inequality)) + geom_point(color="red"")
)
)
l
/
)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
library(tidyverse)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
country <- c("Angola", "Papua New Guinea", "Pakistan", "Chad", "Ethiopia", "Kenya", "Nigeria", "Liberia", "Burkina Faso", "India")
coverage <- c(-0.14, -0.35, 0.12, 0.14, 0.32, 0.07, 0.2, 0.18, 0.3, 0.35)
inequality <- c(0.1, 0.08, 0.05, 0.01, 0.005, -0.06, -0.07, -0.11, -0.13, -0.16)
df_plot <- data.frame(country, coverage, inequality)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2)
#praticce
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(color = "red") +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1))
df_plot$size <- c(1.1, 0.6, 3, 1, 2, 1.1, 3, 0.7, 1.1, 8)
df_plot$color <- c("purple", "blue", "yellow", "purple", "purple", "purple", "purple", "purple", "purple", "yellow")
df_plot
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1))
df_plot
df_plot$size <- c(1.1, 0.6, 3, 1, 2, 1.1, 3, 0.7, 1.1, 8)
df_plot$color <- c("purple", "blue", "yellow", "purple", "purple", "purple", "purple", "purple", "purple", "yellow")
df_plot
geom_point(aes(size = size, color = color) +
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1))
ggplot(df_plot, aes(x = coverage, y = inequality)) +
#practice
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color)) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1))
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color)) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1))
#practice
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color)) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1)) +
scale_color_manual(values = c("purple", "blue", "yellow"),
labels = c("Purple", "Blue", "Yellow"))
#practice
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color)) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
xlim(c(-0.35, 0.55)) +
ylim(c(-0.17, 0.1)) +
scale_color_manual(values = c("purple", "blue", "yellow"),
labels = c("Tim", "Xanh", "Vang"))
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color), alpha = 0.8) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
geom_vline(xintercept = 0, color = "#999999") +
geom_hline(yintercept = 0, color = "#999999") +
scale_x_continuous(breaks = c(-0.25, 0, 0.25, 0.5),
limits = c(-0.4, 0.55)) +
scale_y_continuous(breaks = c(-0.1, 0, 0.1), limits = c(-0.16, 0.1)) +
scale_size_continuous(
breaks = c(2, 4, 6, 8),
labels = c("50 million", "100 million", "150 million", "200 million"),
range = c(0, 8),
guide = guide_legend(order = 1)
) +
scale_color_manual(
values = cols,
breaks = c("red", "green", "darkblue", "yellow", "blue", "purple"),
labels = c(
"Central Europe, Eastern Europe and Central Asia",
"Latin America and Caribbean",
"North Africa and Middle East",
"South Asia",
"Southeast Asia, East Asia and Oceania",
"Sub-Saharan Africa"
),
guide = guide_legend(order = 2)
) +
labs(x = "Change in MCV1 coverage (2019-2000)",
y = "Change in absolute geographical inequality (2019-2000)",
size = NULL,
color = NULL) +
theme_classic() +
theme(
legend.position = "top",
legend.direction = "vertical",
legend.text = element_text(size = 11),
legend.key.height = unit(0.5, "cm"),
axis.text = element_text(size = 11)
)
cols <- c(
"red" = "#fa8495",
"green" = "#4ca258",
"darkblue" = "#6493bb",
"yellow" = "#d7c968",
"blue" = "#7dd8f3",
"purple" = "#bc5c91"
)
ggplot(df_plot, aes(x = coverage, y = inequality)) +
geom_point(aes(size = size, color = color), alpha = 0.8) +
geom_text(aes(label = country), hjust = -0.2, vjust = 0.2) +
geom_vline(xintercept = 0, color = "#999999") +
geom_hline(yintercept = 0, color = "#999999") +
scale_x_continuous(breaks = c(-0.25, 0, 0.25, 0.5),
limits = c(-0.4, 0.55)) +
scale_y_continuous(breaks = c(-0.1, 0, 0.1), limits = c(-0.16, 0.1)) +
scale_size_continuous(
breaks = c(2, 4, 6, 8),
labels = c("50 million", "100 million", "150 million", "200 million"),
range = c(0, 8),
guide = guide_legend(order = 1)
) +
scale_color_manual(
values = cols,
breaks = c("red", "green", "darkblue", "yellow", "blue", "purple"),
labels = c(
"Central Europe, Eastern Europe and Central Asia",
"Latin America and Caribbean",
"North Africa and Middle East",
"South Asia",
"Southeast Asia, East Asia and Oceania",
"Sub-Saharan Africa"
),
guide = guide_legend(order = 2)
) +
labs(x = "Change in MCV1 coverage (2019-2000)",
y = "Change in absolute geographical inequality (2019-2000)",
size = NULL,
color = NULL) +
theme_classic() +
theme(
legend.position = "top",
legend.direction = "vertical",
legend.text = element_text(size = 11),
legend.key.height = unit(0.5, "cm"),
axis.text = element_text(size = 11)
)
#Tạo bảng tóm tắt dữ liệu
library(skimr)
skim(covid_cases[,c("percent_chn", "percent_vnm", "percent_usa", "percent_sgp")])
# ====== R Scipt for take home exercise solution ===
#doc du lieu
covid_cases <- readRDS("~/GitHub/day1/data/covid_cases.rds")
skim(covid_cases[,c("percent_chn", "percent_vnm", "percent_usa", "percent_sgp")])
# ====== R Scipt for take home exercise solution ===
#doc du lieu
covid_cases <- readRDS("~/GitHub/day1/data/covid_cases.rds")
head(covid_cases)
#Ngay bao cao du lieu
##Som nhat
first_report_date <- min(covid_cases$date, na.rm = T)
head(first_report_date)
##Muon nhat
Last_report_date <- max(covid_cases$date, na.rm = T)
head(Last_report_date)
#Tao cot moi dai dien tong so truong hop tren moi quoc gia moi ngay bao cao
library(dplyr)
covid_cases <- covid_cases %>%
mutate(case_global = rowSums(select(., starts_with("cases_")), na.rm = TRUE))
head(covid_cases)
covid_cases <- covid_cases %>%
mutate(percent_chn = 100*cases_chn/case_global)
##Tao mot Function
compute_percent <- function(data, country_code) {
# Tạo tên cột quốc gia
country_col <- paste0("cases_", country_code)
# Kiểm tra cột có tồn tại không
if (!(country_col %in% names(data))) {
stop(paste("Cột", country_col, "không tồn tại trong dữ liệu."))
}
if (!("case_global" %in% names(data))) {
stop("Cột case_global chưa có trong dữ liệu.")
}
# Tính phần trăm
percent <- 100 * data[[country_col]] / data$case_global
return(percent)
}
compute_percent <- function(data, country_code) {
# Tạo tên cột quốc gia
country_col <- paste0("cases_", country_code)
# Kiểm tra cột có tồn tại không
if (!(country_col %in% names(data))) {
stop(paste("Cột", country_col, "không tồn tại trong dữ liệu."))
}
if (!("case_global" %in% names(data))) {
stop("Cột case_global chưa có trong dữ liệu.")
}
return(percent)
#su dung function tao 3 cot moi
library(dplyr)
covid_cases <- covid_cases %>%
mutate(
percent_chn = compute_percent(., "chn"),
percent_vnm = compute_percent(., "vnm"),
percent_usa = compute_percent(., "usa"),
percent_sgp = compute_percent(., "sgp")
)
covid_cases %>%
select(date, percent_chn, percent_vnm, percent_usa, percent_sgp) %>%
print()
print()
skim(covid_cases[,c("percent_chn", "percent_vnm", "percent_usa", "percent_sgp")])
